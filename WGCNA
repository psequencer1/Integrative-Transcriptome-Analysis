install.packages("BiocManager")
BiocManager::install("tidyverse")

setwd("C:/Users/psequ/OneDrive/Desktop/Thesis Systems/WGCNA") 
getwd()
dir()

library(WGCNA)
library(flashClust)
library(tidyverse)
library(org.Hs.eg.db)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(limma)

get_expression <- function(proj, n = 20) {
  query <- GDCquery(
    project = proj,
    data.category = "Transcriptome Profiling",
    data.type = "Gene Expression Quantification", 
    workflow.type = "HTSeq - FPKM",
    sample.type = "Primary Tumor"
  )
  query$results[[1]] <- query$results[[1]][1:n,]
  GDCdownload(query)
  data <- GDCprepare(query)
  exp <- assay(data) %>% as.data.frame() %>%
    rownames_to_column(var = "Ensembl_ID") %>% {
      unimap <- mapIds(
        org.Hs.eg.db, keys = .$Ensembl_ID, keytype = "ENSEMBL", 
        column = "SYMBOL", multiVals = "filter")
      filter(., Ensembl_ID %in% names(unimap))
    } %>%
    mutate(Symbol = AnnotationDbi::select(
      org.Hs.eg.db, keys = .$Ensembl_ID, keytype = "ENSEMBL",
      columns = "SYMBOL")$SYMBOL, .before = Ensembl_ID) %>%
    dplyr::select(!Ensembl_ID) %>%
    filter(!is.na(Symbol)) %>%
    group_by(Symbol) %>%
    summarise_all(mean) %>% 
    column_to_rownames(var = "Symbol")
  return(exp)
}

exp <- get_expression(c("TCGA-COAD","TCGA-READ"), n = 644)

keep <- rowSums(exp) >= 10
exp <- exp[keep,]

write.table(exp, file = "exp.txt", row.names=F, sep="\t", quote=F)

#Remove samples with NA stage
exp=exp[,c(-497,-614)]

exp=exp[,c(-145,-381)]

head(exp)

exp <- exp[!duplicated(row.names(exp)),] 

#######

list = read.csv( "new_paper.csv")

# Gene filtered, taking the absolute difference in top 5000gene

data.mat <- t(exp[order(apply(exp, 1, mad), decreasing = T)[1:5000],])

dim(data.mat)

####### from RRA list ######

list = read.csv("WGCNA_list_FDR.csv")

row.names(exp1)=row.names(exp1$Name)
exp1<- exp1[,-1]

exp=list

exp = as.data.frame(t(list[,-1]));

names(exp) = list$Name
rownames(exp) = names(list[-1])

head(exp)[1:6]

data.mat=exp

# Filter abnormal samples

gsg <- goodSamplesGenes(data.mat, verbose = 3)

if (!gsg$allOK) {
  if (sum(!gsg$goodGenes)>0) 
    printFlush(paste("Removing genes:", 
                     paste(names(data.mat)[!gsg$goodGenes], collapse = ",")));
  
  if (sum(!gsg$goodSamples)>0) 
    printFlush(paste("Removing samples:", 
                     paste(rownames(data.mat)[!gsg$goodSamples], collapse = ",")));
  
  # Delete abnormal samples and genes 
  data.mat = data.mat[gsg$goodSamples, gsg$goodGenes]
}


# Draw sample cluster diagram 

sampleTree = flashClust(dist(data.mat), method = "average");

# Plot the sample tree: Open a graphic output window of size 12 by 9 inches

# The user should change the dimensions if the window is too large or too small.

sizeGrWindow(12,9)

par(cex = 0.6);

par(mar = c(0,4,2,0))

plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
     
     cex.axis = 1.5, cex.main = 2)

# Plot a line to show the cut
abline(h = 195, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 195, minSize = 10)
table(clust)
# clust 1 contains the samples we want to keep.
keepSamples = (clust==1)
data.mat1 = data.mat[keepSamples, ]
nGenes = ncol(data.mat1)
nSamples = nrow(data.mat1)
collectGarbage()

dim(data.mat1)

data.mat=data.mat1
# Turn on multithreading

#enableWGCNAThreads()
allowWGCNAThreads()
type <- "unsigned"
powers <- c(1:10, seq(from = 12, to=20, by=2))
sft <- pickSoftThreshold(
  data.mat, powerVector=powers,
  networkType=type, verbose=3
) 

#Draw a soft threshold curve

par(mfrow = c(1, 2))
cex1 = 0.9
plot(
  sft$fitIndices[, 1], 
  -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
  xlab = "Soft Threshold (power)",
  ylab = "Scale Free Topology Model Fit,signed R^2",
  type = "n",
  main = paste("Scale independence")
)
text(
  sft$fitIndices[, 1],
  -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
  labels = powers,
  cex = cex1,
  col = "red"
)
abline(h = 0.9, col = "red")

plot(
  sft$fitIndices[, 1],
  sft$fitIndices[, 5],
  xlab = "Soft Threshold (power)",
  ylab = "Mean Connectivity",
  type = "n",
  main = paste("Mean connectivity")
)
text(
  sft$fitIndices[, 1],
  sft$fitIndices[, 5],
  labels = powers,
  cex = cex1,
  col = "red"
)

sft$powerEstimate

# Blockwise method for heavy data

net <- blockwiseModules(
  data.mat1,
  power = 3,
  # Maximum number of modules
  maxBlockSize = 5000,
  TOMType = type,
  minModuleSize = 30,
  reassignThreshold = 0,
  # Need to merge the threshold of the module
  mergeCutHeight = 0.2,
  # Use numbers as the name of the module
  numericLabels = TRUE,
  pamRespectsDendro = FALSE,
  saveTOMs = TRUE,
  saveTOMFileBase = "C:/Users/psequ/OneDrive/Desktop/Thesis Systems/TCGA",
  verbose = 3
)

table(net$colors)

# Step by step method

# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(data.mat1, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")

sft$powerEstimate


#Co-expression similarity and adjacency
softPower = 4;
adjacency = adjacency(data.mat, power = softPower,type="unsigned");

# Turn adjacency into topological overlap
TOM = TOMsimilarity(adjacency,TOMType = "unsigned");
dissTOM = 1-TOM

# Call the hierarchical clustering function
geneTree = hclust(as.dist(dissTOM), method = "average");
# Plot the resulting clustering tree (dendrogram)
sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
     labels = FALSE, hang = 0.04);

# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 30;
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
                            deepSplit = 2, pamRespectsDendro = FALSE,
                            minClusterSize = minModuleSize);
table(dynamicMods)

# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
# Plot the dendrogram and colors underneath
sizeGrWindow(8,6)
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05,
                    main = "Gene dendrogram and module colors")

# Calculate eigengenes
MEList = moduleEigengenes(data.mat, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
     xlab = "", sub = "")

MEDissThres = 0.3
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Call an automatic merging function
merge = mergeCloseModules(data.mat, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;


sizeGrWindow(12, 9)
#pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
                    c("Dynamic Tree Cut", "Merged dynamic"),
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)
#dev.off()

#Rename to moduleColors
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
table(moduleLabels)

moduleLabels<-table(moduleLabels)
write.table(moduleLabels, file = "moduleLabelsCOADREAD.txt", row.names=F, sep="\t", quote=F)
MEs = mergedMEs

MEs_col<-merge$newMEs
# Show the correlation between modules

MEs_col <- orderMEs(MEs_col)

# The correlation diagram between the modules obtained by clustering according to the expression amount of genes
# marDendro/marHeatmap Set the bottom, left, top, and right margins
plotEigengeneNetworks(
  mergedMEs,
  "Eigengene adjacency heatmap",
  marDendro = c(3, 3, 2, 4),
  marHeatmap = c(3, 4, 2, 2),
  plotDendrograms = T,
  xLabelsAngle = 90
) 


# Network heatmap plot

# calculated during module detection, but let us do it again here.
dissTOM = 1-TOMsimilarityFromExpr(data.mat, power = 4);
# Transform dissTOM with a power to make moderately strong connections more visible in the heatmap
plotTOM = dissTOM^7;
# Set diagonal to NA for a nicer plot
diag(plotTOM) = NA;
# Call the plot function
sizeGrWindow(9,9)
TOMplot(plotTOM, geneTree, moduleColors, main = "Network heatmap plot, all genes")

mycolor <- gplots::colorpanel(250,'red', "orange",'lemonchiffon')
nSelect = 250
# For reproducibility, we set the random seed
set.seed(10);
select = sample(nGenes, size = nSelect);
selectTOM = dissTOM[select, select];
# There's no simple way of restricting a clustering tree to a subset of genes, so we must re-cluster.
selectTree = hclust(as.dist(selectTOM), method = "average")
selectColors = moduleColors[select];
# Open a graphical window
sizeGrWindow(9,9)
# Taking the dissimilarity to a power, say 10, makes the plot more informative by effectively changing
# the color palette; setting the diagonal to NA also improves the clarity of the plot
plotDiss = selectTOM^7;
diag(plotDiss) = NA;
TOMplot(plotDiss, selectTree, selectColors, main = "Network heatmap plot, selected genes",col = mycolor)


#####  Identify phenotype related modules ##### 

query <- GDCquery(
  project = c("TCGA-COAD","TCGA-READ"),
  data.category = "Clinical",
  data.type = "Clinical Supplement",
  data.format = "BCR Biotab",
  file.type = "patient"
  )

GDCdownload(query)
clinical <- GDCprepare(query)

data.clin <- clinical$clinical_patient_coad[-c(1,2),]

COADclin = read.csv("clinical_COADREAD.csv");

COADclin1 = read.csv("TNM.csv");

head(COADclin)
dim(exp)

########## datTraits is working for TNM and design model matrix for stages ##########

Samples = rownames(data.mat);
traitRows = match(Samples, use.clin1$barcode);
datTraits = use.clin1[traitRows, -1];
rownames(datTraits) = use.clin1[traitRows, 1];


###### Build the stage classification matrix (instead of datTraits) ####
design <- model.matrix(~0 + use.clin$TNM_Staging)
dimnames(design) <- list(use.clin$sample, sort(unique(use.clin$TNM_Staging)))
design <- design[rownames(mergedMEs),] 

nGenes = ncol(data.mat);
nSamples = nrow(data.mat);

MEs0 = moduleEigengenes(data.mat, moduleColors)$eigengenes
MEs = orderMEs(MEs0)

moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);

sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
                   signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = names(datTraits),
               yLabels = names(MEs),
               ySymbols = names(MEs),
               colorLabels = FALSE,
               colors = blueWhiteRed(50),
               textMatrix = textMatrix,
               setStdMargins = FALSE,
               cex.text = 0.5,
               zlim = c(-1,1),
               main = paste("Module-trait relationships"))



# Calculate pearson correlation and significance
modTraitCor <- cor(MEs, datTraits, use = "p")
modTraitP <- corPvalueStudent(modTraitCor, dim(use.clin)[1]) 

modTraitCorP = bicorAndPvalue(MEs_col, design)
modTraitCor = modTraitCorP$bicor
modTraitP   = modTraitCorP$p


textMatrix <- paste0(signif(moduleTraitCor, 2), "\n(", signif(moduleTraitPvalue, 1), ")")
dim(textMatrix) <- dim(moduleTraitCor)
labeledHeatmap(
  Matrix = moduleTraitCor,
  xLabels = colnames(datTraits),
  yLabels = colnames(MEs_col),
  cex.lab = 0.5,
  ySymbols = colnames(MEs_col),
  colorLabels = FALSE,
  colors = blueWhiteRed(50),
  textMatrix = textMatrix,
  setStdMargins = FALSE,
  cex.text = 0.5,
  zlim = c(-1, 1),
  main = paste("Module-trait relationships")
)


# lmFit() needs a transposed version of the matrix
fit <- limma::lmFit(t(MEs_col), design = datTraits)

# Apply empirical Bayes to smooth standard errors
fit <- limma::eBayes(fit)

stats_df <- limma::topTable(fit, number = ncol(MEs_col)) %>%
  tibble::rownames_to_column("module")

head(stats_df)


nSamples <- dim(data.mat)[1]
geneModuleMembership <- cor(data.mat, MEs_col, use = "p")
MMPvalue <- corPvalueStudent(geneModuleMembership, nSamples)

geneSignificanceCor <- cor(data.mat, datTraits, use = "p")
geneSignificanceP <- corPvalueStudent(geneSignificanceCor, nSamples)

modNames = substring(names(MEs_col), 3)

module <- "blue"
column = match(module, modNames);
moduleGenes = moduleColors==module;

MM <- abs(geneModuleMembership[moduleGenes, column])
GS <- abs(geneSignificanceCor[moduleGenes, 1])
verboseScatterplot(
  MM, GS,
  xlab = paste("Module Membership in", module, "module"),
  ylab = "Gene Significance",
  main = paste("Module membership vs. gene significance\n"),
  cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2,
  abline = F,pch = 21, col = "black" ,bg = module) 


kME<-as.data.frame(MM)

write.table(kME, file = "kME_blue_new.txt", row.names=T, sep="\t", quote=F)


############ For stages ##############

# Calculate pearson correlation and significance
modTraitCor <- cor(MEs_col, design, use = "p")
modTraitP <- corPvalueStudent(modTraitCor, dim(use.clin)[1]) 

modTraitCorP = bicorAndPvalue(MEs_col, design)
modTraitCor = modTraitCorP$bicor
modTraitP   = modTraitCorP$p


textMatrix <- paste0(signif(modTraitCor, 2), "\n(", signif(modTraitP, 1), ")")
dim(textMatrix) <- dim(modTraitCor)
labeledHeatmap(
  Matrix = modTraitCor,
  xLabels = colnames(design),
  yLabels = colnames(MEs_col),
  cex.lab = 0.5,
  ySymbols = colnames(MEs_col),
  colorLabels = FALSE,
  colors = blueWhiteRed(50),
  textMatrix = textMatrix,
  setStdMargins = FALSE,
  cex.text = 0.5,
  zlim = c(-1, 1),
  main = paste("Module-trait relationships")
)


# lmFit() needs a transposed version of the matrix
fit <- limma::lmFit(t(mergedMEs), design = design)

# Apply empirical Bayes to smooth standard errors
fit <- limma::eBayes(fit)

stats_df <- limma::topTable(fit, number = ncol(mergedMEs)) %>%
  tibble::rownames_to_column("module")


# Finally, combine the two correlation matrices and specify the module of interest for analysis
module = "blue"
pheno = "TNM_staging"
modNames = substring(names(MEs_col), 3)
# Get the following column
module_column = match(module, modNames)
pheno_column = match(pheno,colnames(datTraits))
# Get the genes in the module
moduleGenes = moduleColors == module

Mmembership<-abs(geneModuleMembership[moduleGenes, module_column])

kME<-as.data.frame(Mmembership)

sizeGrWindow(7, 7)
par(mfrow = c(1,1))
# Genes that are highly related to traits are also key genes in models related to traits
verboseScatterplot(abs(geneModuleMembership[moduleGenes, module_column]),
                   abs(geneSignificanceCor[moduleGenes, pheno_column]),
                   xlab = paste("Module Membership in", module, "module"),
                   ylab = paste("Gene significance for", pheno),
                   main = paste("Module membership vs. gene significance\n"),
                   cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2,
                   abline = F,pch = 21, col = "black" ,bg = module) 


write.table(kME, file = "kME_III.txt", row.names=T, sep="\t", quote=F)

# select key genes in the upper right corner of the scatter diagram 
sigmodule<- moduleGenes[(GS > 0.7 & MM > 0.7)]

# Export module network

TOM <- TOMsimilarityFromExpr(data.mat, power=7, networkType=type)
dimnames(TOM) <- list(colnames(data.mat), colnames(data.mat))
modTOM <- TOM[moduleGenes, moduleGenes]
cyt <- exportNetworkToCytoscape(
  modTOM,
  edgeFile = paste0(file, module, ".edges.txt"),
  nodeFile = paste0(file, module, ".nodes.txt"),
  weighted = TRUE,
  threshold = 0,
  nodeNames = moduleGenes,
  nodeAttr = module
)


sizeGrWindow(8,7)
par(mfrow = c(1,1))
plotModuleSignificance(GeneSignificance,dynamicColors)

# Extract genes in modules

datsummary<- colnames(data.mat1)
datME<- moduleEigengenes(data.mat1, dynamicColors)[[1]]
color1<- rep("grey",dim(data.mat1)[[2]])
color1<-as.character(dynamicColors)
datkme<- signedKME(data.mat1,datME)
datout<-data.frame(datsummary,colorNEW= color1,datkme)


write.table(datout, file = "datout.txt", row.names=F, sep="\t", quote=F)
